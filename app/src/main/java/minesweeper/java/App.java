/*
 * This source file was generated by the Gradle 'init' task
 */
package minesweeper.java;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.UIManager;

import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Random;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
public class App extends JFrame {
    private static final Logger logger = Logger.getLogger(App.class.getName());
    private static final int SIZE_FACTOR = 50;
    private static final int EMOJI_FONT_SIZE = 10;
    private static final int FONT_SIZE = 15;
    private static final int EASY_MINES = 10, EASY_SIZE = 10;
    private static final int MEDIUM_MINES = 20, MEDIUM_SIZE = 15;
    private static final int HARD_MINES = 40, HARD_SIZE = 20;
    private JPanel gamePanel;
    private JPanel gameInfoPanel;
    private int size;
    private int numMines;
    private int numFlags;
    private int elapsedSeconds;
    private int flagsPlaced;
    private int revealedCount;
    private int[][] field;
    private JButton[][] gameButtons;
    private JButton newGameButton;
    private boolean[][] revealed;
    private boolean[][] flagged;
    private boolean firstClick;
    private Difficulty difficulty;
    private Font buttonFont;
    private JLabel timerLabel;
    private JLabel minesLeftLabel;
    private Timer gameTimer;
    private SoundMan soundManager;
    
    static {
        try {

            File logDir = new File("logs");
            if(!logDir.exists()) {
                logDir.mkdirs();
            }

            FileHandler handler = new FileHandler("logs/applog.log", true);
            handler.setFormatter(new SimpleFormatter());
            logger.addHandler(handler);
            logger.setUseParentHandlers(false);
            logger.setLevel(Level.ALL);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public App() {
        
        try (InputStream is = getClass().getResourceAsStream("/fonts/Bytesized-Regular.ttf")) {
            buttonFont = Font.createFont(Font.TRUETYPE_FONT, is).deriveFont(Font.PLAIN, FONT_SIZE);
            GraphicsEnvironment.getLocalGraphicsEnvironment().registerFont(buttonFont);
        }
        catch (IOException | FontFormatException e) {
            logger.log(Level.WARNING, "Utilizing Fallback Font", e);
            buttonFont = new Font("SansSerif", Font.PLAIN, FONT_SIZE);
        }

        UIManager.put("Label.font", buttonFont);
        UIManager.put("Button.foreground", Color.BLACK);
        UIManager.put("Button.disabledText", Color.BLACK);

        soundManager = new SoundMan();
        soundManager.load(Audios.CLICK, "/audio/click.wav");
        soundManager.load(Audios.FLAG, "/audio/flagclick.wav");
        soundManager.load(Audios.LOSE, "/audio/bombclick.wav");
        soundManager.load(Audios.NEW_GAME, "/audio/newgameclick.wav");
        soundManager.load(Audios.WIN, "/audio/winnoise.wav");
        setTitle("Mine Sweeper");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        initGame();
    }

    private void initGame() {
        setLayout(new BorderLayout());
        initDifficulty();
        setSize((size * SIZE_FACTOR), (size * SIZE_FACTOR));
        setResizable(false);
        field = new int[size][size];
        gameInfoPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 5));
        gamePanel = new JPanel(new GridLayout(size, size));
        elapsedSeconds = 0;
        flagsPlaced = 0;
        revealedCount = 0;
        gameTimer = new Timer(1000, e -> {
            elapsedSeconds ++;
            timerLabel.setText(String.format("%d", elapsedSeconds));
        });
        initInfoPanel();
        initButtons();
        add(gameInfoPanel, BorderLayout.NORTH);
        add(gamePanel, BorderLayout.CENTER);
        setVisible(true);
        gameTimer.start();
    }

    private void initInfoPanel() {
        timerLabel = new JLabel("0");
        minesLeftLabel = new JLabel(String.format("%d", (numMines - flagsPlaced)));
        newGameButton = new JButton("ðŸ˜„");

        newGameButton.addActionListener(e -> restartGame());

        gameInfoPanel.add(timerLabel);
        gameInfoPanel.add(newGameButton);
        gameInfoPanel.add(minesLeftLabel);
    }

    private void restartGame() {
        soundManager.play(Audios.NEW_GAME);
        gameTimer.stop();
        gamePanel.removeAll();
        gameInfoPanel.removeAll();
        getContentPane().removeAll();
        initGame();
        revalidate();
        repaint();
    }

    private void initButtons() {
        gameButtons = new JButton[size][size];
        revealed = new boolean[size][size];
        flagged = new boolean[size][size];
        for (int x = 0; x < size; x++) {
            for(int y = 0; y < size; y++) {
                JButton button = new JButton();
                gameButtons[x][y] = button;
                int finalx = x, finaly = y;
                button.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if(SwingUtilities.isRightMouseButton(e)) {
                            toggleFlag(finalx, finaly);
                        } else if(SwingUtilities.isLeftMouseButton(e)) {
                            reveal(finalx, finaly);
                        }
                    }
                }); 
                button.setFont(buttonFont);
                gamePanel.add(button);
            }
        }
    }

    private void initMines(int safeX, int safeY) {
        Random rand = new Random();
        int minesPlaced = 0;

        while (minesPlaced < numMines) {
            int x = rand.nextInt(size);
            int y = rand.nextInt(size);

            if (Math.abs(x - safeX) <= 1 && Math.abs(y - safeY) <= 1) continue;

            if(field[x][y] != -1) {
                field[x][y] = -1;
                minesPlaced++;

                for (int i = -1; i <=1; i++) {
                    for (int j = -1; j <=1; j++) {
                        int nx = x + i, ny = y + j;
                        if (nx >= 0 && ny >= 0 && nx < size && ny < size && field[nx][ny] != -1) {
                            field[nx][ny]++;
                        }
                    }
                }
            }
        }
    }

    private void initDifficulty() {
        firstClick = true;
        JOptionPane oPane = 
        new JOptionPane(
            "Choose a difficulty",
            JOptionPane.QUESTION_MESSAGE,
            JOptionPane.DEFAULT_OPTION,
            null,
            new Object[]{Difficulty.EASY.toString(), Difficulty.MEDIUM.toString(), Difficulty.HARD.toString()},
            Difficulty.EASY.toString()
        );

        JDialog difficultyDialog = oPane.createDialog(this, "Difficulty");
        difficultyDialog.setVisible(true);
        difficultyDialog.setAlwaysOnTop(true);
        
        Object selectedDifficulty = oPane.getValue();

        if(selectedDifficulty == null) System.exit(0);

        difficulty = switch (oPane.getValue().toString()) {
            case "EASY" -> Difficulty.EASY;
            case "MEDIUM" -> Difficulty.MEDIUM;
            case "HARD" -> Difficulty.HARD;
            default -> null;
        };

        if (difficulty == null) {
            throw new NullPointerException("Difficulty was NULL after request");
        }

        switch(difficulty) {
            case EASY -> { size = EASY_SIZE; numMines = EASY_MINES;}
 
            case MEDIUM -> { size = MEDIUM_SIZE; numMines = MEDIUM_MINES;}

            case HARD -> {size = HARD_SIZE; numMines = HARD_MINES;}
        }

        numFlags = numMines;
    }

    private void reveal(int x, int y) {
        if(flagged[x][y] || revealed[x][y]) return;

        soundManager.play(Audios.CLICK);
        if(firstClick) {
            initMines(x, y);
            firstClick = false;
        }
        revealed[x][y] = true;
        revealedCount++;

        JButton revealedButton = gameButtons[x][y];

        if(field[x][y] == -1) {
            revealedButton.setFont(new Font("SansSerif", Font.PLAIN, EMOJI_FONT_SIZE));
            revealedButton.setText("ðŸ’£");
            revealedButton.setBackground(Color.RED);
            gameOver();
            return;
        }


        if(revealedCount == ((size * size) - numMines)) {
            winGame();
        }

        revealedButton.setEnabled(false);
        revealedButton.setBackground(Color.getHSBColor(293f / 360f, 0.22f, 1f));
        if (field[x][y] > 0) {
            String value = String.valueOf(field[x][y]);
            revealedButton.setText(value);
            switch (field[x][y]) {
                case 1:
                    revealedButton.setBackground(Color.getHSBColor(195f / 350f, 0.5f, 1f));
                    break;
                case 2:
                    revealedButton.setBackground(Color.getHSBColor(29f / 360f, 0.5f, 1f));
                    break;
                case 3:
                    revealedButton.setBackground(Color.getHSBColor(0f / 360f, 0.5f, 1f));
                    break;
                case 4:
                    revealedButton.setBackground(Color.getHSBColor(125f / 360f, 0.5f, 1f));
                    break;
                case 5:
                    revealedButton.setBackground(Color.getHSBColor(166f / 360f, 0.5f, 1f));
                    break;
                case 6:
                    revealedButton.setBackground(Color.getHSBColor(202f / 360f, 0.5f, 1f));
                    break;
                case 7:
                    revealedButton.setBackground(Color.getHSBColor(268f / 360f, 0.5f, 1f));
                    break;
                case 8:
                    revealedButton.setBackground(Color.getHSBColor(310f / 360f, 0.5f, 1f));
                    break;
                default:
                    revealedButton.setBackground(Color.getHSBColor(240f / 360f, 0.5f, 0f));
                    break;
            }
        } else {
            revealedButton.setText(" ");
            for (int dx = -1; dx <=1; dx++) {
                for (int dy = -1; dy <= 1; dy++) {
                    int nx = x + dx, ny = y + dy;
                    if(nx >= 0 && ny >= 0 && nx < size && ny < size) {
                        reveal(nx, ny);
                    }
                }
            }
        }
    }

    void toggleFlag(int x, int y) {
        if(revealed[x][y]) return;
    

        soundManager.play(Audios.FLAG);
        flagged[x][y] = !flagged[x][y];

        if(flagged[x][y] && numFlags == 0) {
            flagged[x][y] = false;
        } else if (!flagged[x][y]) {
            numFlags++;
            flagsPlaced--;
        } else {
            numFlags--;
            flagsPlaced++;
        }

        JButton flaggedButton = gameButtons[x][y];

        if(flagged[x][y]) {
            flaggedButton.setText("F");
            flaggedButton.setForeground(Color.RED);
        } else if (!flagged[x][y]) {
            flaggedButton.setText("");
        }

        minesLeftLabel.setText("" + (numMines - flagsPlaced));
    }

    private void gameOver() {
        soundManager.play(Audios.LOSE);
        for(int x = 0; x < size; x++) {
            for(int y = 0; y< size; y++) {
                if(field[x][y] == -1) {
                    gameButtons[x][y].setFont(new Font("SansSerif", Font.PLAIN, EMOJI_FONT_SIZE));
                    gameButtons[x][y].setText("ðŸ’£");
                }
                gameButtons[x][y].setEnabled(false);
            }
        } 
        gameTimer.stop();
        newGameButton.setText("ðŸ˜¡");
        JOptionPane.showMessageDialog(this, "You Lose!", "Failure!", JOptionPane.INFORMATION_MESSAGE);
        restartGame();
    }

    private void winGame() {
        soundManager.play(Audios.WIN);
        gameTimer.stop();
        for(int x = 0; x < size; x++) {
            for (int y = 0; y < size; y++) {
                gameButtons[x][y].setEnabled(false);
            }
        }

        newGameButton.setText("ðŸ˜Ž");
        JOptionPane.showMessageDialog(this, "You Win!", "Victory", JOptionPane.INFORMATION_MESSAGE);
        restartGame();
    }

    enum Difficulty {
        EASY,
        MEDIUM,
        HARD
    }

    enum Audios {
        WIN,
        LOSE,
        CLICK,
        FLAG,
        NEW_GAME
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(App::new);
    }
}

